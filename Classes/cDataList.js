//----------------------------------------------------------------------------------------------------
//  oo object.
//----------------------------------------------------------------------------------------------------
function cDataList()
{
  this.xRefs = [];
  this.xRecs = {};
  this.xActive = null;
  this.xReady = false;
}

//----------------------------------------------------------------------------------------------------
//  init.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fInit =
function(
  vRefs
)
{
  this.xRefs = vRefs;
  this.xRefs.core.parent = this;
  this.xReady = true;
}

//----------------------------------------------------------------------------------------------------
//  check if in ready state.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fIsReady =
function()
{
  return this.xReady;
}

//----------------------------------------------------------------------------------------------------
//  return the core object.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fCore =
function()
{
  return this.xRefs.core;
}

//----------------------------------------------------------------------------------------------------
//  add a row.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fAdd =
function(
  vRec
)
{
  if (! this.xActive)
    return;
    
  if (! this.xRecs[this.xActive])
    this.xRecs[this.xActive] = [];
  this.xRecs[this.xActive].push(vRec);
}

//----------------------------------------------------------------------------------------------------
//  refresh table.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fRefresh =
function()
{
  var vTable = this.xRefs.tbl;
  cTable.fDeleteAll('#' + vTable);
  
  var vList = this.xRecs[this.xActive];
  if (!vList)
    return;

  this.xRefs.core.fFormat(vList);
  for (i=0; i<vList.length; i++) 
    cTable.fAdd('#' + vTable, (i % 2 == 0) ? "cEven" : "cOdd", -1, vList[i]);
}

//----------------------------------------------------------------------------------------------------
//  check if a record set exists.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fExists =
function(
  vTag
)
{
  if (this.xRecs[vTag])
    return true;
  return false;
}

//----------------------------------------------------------------------------------------------------
//  forget about this record set.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fForget =
function(
  vTag
)
{
  if (this.xRecs[vTag])
    delete this.xRecs[vTag];
}


//----------------------------------------------------------------------------------------------------
//  forget all record sets.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fForgetAll =
function()
{
  this.xRecs = {};
}

//----------------------------------------------------------------------------------------------------
//  switch to a different record set (if available).
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fSetActive =
function(
  vTag
)
{
  if (! this.xRecs[vTag])
    this.xRecs[vTag] = [];
  this.xActive = vTag;
}

//----------------------------------------------------------------------------------------------------
//  get the active tag.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fGetActive =
function()
{
  return this.xActive;
}

//----------------------------------------------------------------------------------------------------
//  get the active rows (currently visible).
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fGetActiveRows =
function()
{
  return this.xRecs[this.xActive];
}

//----------------------------------------------------------------------------------------------------
//  get pointer to main window.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fWin =
function()
{
  return this.xRefs['win'];
}

//----------------------------------------------------------------------------------------------------
//  get pointer to main controller.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fController =
function()
{
  return this.xRefs['this'];
}

//----------------------------------------------------------------------------------------------------
//  receive signals from framework.
//----------------------------------------------------------------------------------------------------
cDataList.prototype.fSignal =
function(
  vSignal
)
{
  this.xRefs.core.fSignal(vSignal);
}
























